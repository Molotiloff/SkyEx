# utils/statements.py
from __future__ import annotations

import calendar
import io
from datetime import datetime, timezone, timedelta
from decimal import Decimal

from aiogram.types import CallbackQuery, BufferedInputFile, InlineKeyboardMarkup, InlineKeyboardButton

from db_asyncpg.repo import Repo
from utils.info import get_chat_name


def statements_kb() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤—ã–ø–∏—Å–æ–∫:
      - –í—ã–ø–∏—Å–∫–∞ –∑–∞ –º–µ—Å—è—Ü (—Ç–µ–∫—É—â–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –º–µ—Å—è—Ü, UTC)
      - –í—ã–ø–∏—Å–∫–∞ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è
    """
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìÑ –í—ã–ø–∏—Å–∫–∞ –∑–∞ –º–µ—Å—è—Ü", callback_data="stmt:month")],
            [InlineKeyboardButton(text="üìÑ –í—ã–ø–∏—Å–∫–∞ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è", callback_data="stmt:all")],
        ]
    )


def _month_bounds(dt: datetime) -> tuple[datetime, datetime]:
    """–ù–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞ –≤ UTC [start, end_exclusive)."""
    if dt.tzinfo is None:
        dt = dt.replace(tzinfo=timezone.utc)
    start = dt.astimezone(timezone.utc).replace(day=1, hour=0, minute=0, second=0, microsecond=0)
    days = calendar.monthrange(start.year, start.month)[1]
    end = start + timedelta(days=days)  # –Ω–∞—á–∞–ª–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    return start, end


def _build_statement_xlsx(rows: list[dict], chat_name: str, period_label: str) -> bytes:
    """
    rows ‚Äî –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ Repo.export_transactions(...).
    –û–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–ª—è: txn_at (datetime), currency_code, amount, balance_after, group_name, actor_name, comment, source.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–π—Ç—ã XLSX.
    """
    import xlsxwriter  # –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ requirements

    output = io.BytesIO()
    wb = xlsxwriter.Workbook(output, {'in_memory': True})
    ws = wb.add_worksheet("–í—ã–ø–∏—Å–∫–∞")

    fmt_bold = wb.add_format({'bold': True})
    fmt_header = wb.add_format({'bold': True, 'bg_color': '#EEEEEE', 'border': 1})
    fmt_money = wb.add_format({'num_format': '#,##0.00;[Red]-#,##0.00'})
    fmt_dt = wb.add_format({'num_format': 'yyyy-mm-dd hh:mm'})

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    ws.write(0, 0, f"–í—ã–ø–∏—Å–∫–∞ –ø–æ –∫–æ—à–µ–ª—å–∫—É: {chat_name}", fmt_bold)
    ws.write(1, 0, f"–ü–µ—Ä–∏–æ–¥: {period_label}")

    # –®–∞–ø–∫–∞
    headers = ["–î–∞—Ç–∞/–≤—Ä–µ–º—è (UTC)", "–í–∞–ª—é—Ç–∞", "–°—É–º–º–∞", "–ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ", "–ì—Ä—É–ø–ø–∞", "–û–ø–µ—Ä–∞—Ç–æ—Ä", "–ò—Å—Ç–æ—á–Ω–∏–∫", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"]
    for col, h in enumerate(headers):
        ws.write(3, col, h, fmt_header)

    # –î–∞–Ω–Ω—ã–µ
    r = 4
    for tx in rows:
        ts = tx.get("txn_at")
        code = (tx.get("currency_code") or "").upper()
        amt = Decimal(str(tx.get("amount"))) if tx.get("amount") is not None else Decimal("0")
        bal_after = Decimal(str(tx.get("balance_after"))) if tx.get("balance_after") is not None else Decimal("0")
        group_name = tx.get("group_name") or ""
        actor_name = tx.get("actor_name") or ""
        source = tx.get("source") or ""
        comment = tx.get("comment") or ""

        # Excel datetime –±–µ–∑ tz; –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC naive
        if isinstance(ts, datetime) and ts.tzinfo is not None:
            ts = ts.astimezone(timezone.utc).replace(tzinfo=None)

        if isinstance(ts, datetime):
            ws.write_datetime(r, 0, ts, fmt_dt)
        else:
            ws.write(r, 0, "")

        ws.write(r, 1, code)
        ws.write_number(r, 2, float(amt), fmt_money)
        ws.write_number(r, 3, float(bal_after), fmt_money)
        ws.write(r, 4, group_name)
        ws.write(r, 5, actor_name)
        ws.write(r, 6, source)
        ws.write(r, 7, comment)
        r += 1

    # –ö–æ–ª–æ–Ω–∫–∏
    ws.set_column(0, 0, 20)
    ws.set_column(1, 1, 9)
    ws.set_column(2, 3, 16)
    ws.set_column(4, 6, 18)
    ws.set_column(7, 7, 40)

    wb.close()
    output.seek(0)
    return output.read()


async def handle_stmt_callback(cq: CallbackQuery, repo: Repo) -> None:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –≤—ã–ø–∏—Å–æ–∫:
      - data = "stmt:month" ‚Üí —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
      - data = "stmt:all"   ‚Üí –≤—Å—ë –≤—Ä–µ–º—è
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç XLSX-—Ñ–∞–π–ª –≤ —Ç–æ—Ç –∂–µ —á–∞—Ç.
    """
    msg = cq.message
    if not msg:
        await cq.answer()
        return

    data = (cq.data or "")
    try:
        kind = data.split(":", 1)[1]
    except Exception:
        await cq.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return

    try:
        now = datetime.now(timezone.utc)
        if kind == "month":
            dt_from, dt_to = _month_bounds(now)
            period_label = f"{dt_from:%Y-%m-01} ‚Äî {(dt_to - timedelta(seconds=1)):%Y-%m-%d %H:%M} UTC"
            suffix = f"{dt_from:%Y%m}"
            since_arg, until_arg = dt_from, dt_to
        elif kind == "all":
            period_label = "–≤—Å—ë –≤—Ä–µ–º—è"
            suffix = "all"
            since_arg, until_arg = None, None
        else:
            await cq.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥", show_alert=True)
            return

        chat_id = msg.chat.id
        chat_name = get_chat_name(msg)
        client_id = await repo.ensure_client(chat_id=chat_id, name=chat_name)

        tx_rows = await repo.export_transactions(
            client_id=client_id,
            since=since_arg,
            until=until_arg,
        )

        blob = _build_statement_xlsx(tx_rows or [], chat_name=chat_name, period_label=period_label)
        filename = f"statement_{chat_id}_{suffix}.xlsx"
        file = BufferedInputFile(blob, filename=filename)

        await msg.answer_document(file, caption=f"–í—ã–ø–∏—Å–∫–∞: {period_label}")
        await cq.answer("–ì–æ—Ç–æ–≤–æ")
    except Exception as e:
        await msg.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –≤—ã–ø–∏—Å–∫—É: {e}")
        await cq.answer("–û—à–∏–±–∫–∞", show_alert=True)